
#extension GL_OES_standard_derivatives : enable

#ifdef GL_ES
precision mediump float;
#endif

varying vec4 v_position;
varying vec4 v_normal;
varying vec2 v_texcoord;
varying vec4 v_color;

uniform mat4 u_projectionMatrix;
uniform mat4 u_modelViewMatrix;
uniform mat4 u_normalMatrix;
uniform float u_time;

#if defined(VERTEX)

// attribute vec4 a_position; // myfolder/myfile.obj
attribute vec4 a_position;
attribute vec4 a_normal;
attribute vec2 a_texcoord;
attribute vec4 a_color;

void main(void) {
	v_position = u_projectionMatrix * u_modelViewMatrix * a_position;
	v_normal = u_normalMatrix * a_normal;
	v_texcoord = a_texcoord;
	v_color = a_color;
	gl_Position = v_position;
}

#else // fragment shader
uniform vec2 u_pos;
// uniform sampler2D u_texture; // https://cdn.jsdelivr.net/gh/actarian/plausible-brdf-shader/textures/mars/4096x2048/diffuse.jpg?repeat=true
// uniform vec2 u_textureResolution;

float checker(vec2 uv, float repeats) {
	float cx = floor(repeats * uv.x);
	float cy = floor(repeats * uv.y);
	float result = mod(cx + cy, 2.0);
	return sign(result);
}

precision mediump float;
uniform vec2 u_resolution;
uniform vec2 u_mouse;

#define PI 3.14

vec2 rotate2D(vec2 st, float angle) {
    st -= 0.5;
    st = mat2(cos(angle), -sin(angle),sin(angle), cos(angle)) * st;
    st += 0.5;
    return st;
}

float drawSquare(vec2 st, vec2 size, float smoothEdges) {
    vec2 halfSize = vec2(0.5) - size * 0.5;
    vec2 edgeSmoothness = vec2(smoothEdges * 0.5);
    vec2 uv = smoothstep(halfSize, halfSize + edgeSmoothness, st);
    uv *= smoothstep(halfSize, halfSize + edgeSmoothness, vec2(1.0) - st);
    return uv.x * uv.y;
}

vec2 tileSpace(vec2 st, float zoomFactor) {
    st *= zoomFactor;
    return fract(st);
}




void main() {

    vec2 fragCoordNorm = gl_FragCoord.xy / u_resolution.xy;
    vec3 color = vec3(0.0);
    vec2 tiledCoords = tileSpace(fragCoordNorm, 4.0);
    vec2 rotatedCoords = rotate2D(tiledCoords, PI * 0.25);
    color = vec3(drawSquare(rotatedCoords, vec2(0.7), 0.01));
    gl_FragColor = vec4(color, 1.0);
}


#endif
